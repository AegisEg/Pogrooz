{"version":3,"sources":["img/carGeo.svg","redux/actions/geoarticle.js","Pages/User/GeoDetect.js"],"names":["module","exports","geoArticlesGet","apiToken","dispatch","Promise","resolve","reject","fetch","api","urlApi","method","headers","Accept","Authorization","then","response","json","articles","type","GEOARTICLES_GET","payload","GeoDetect","state","articleId","this","props","isGetted","GeoActions","user","length","setState","_id","b","article","find","item","className","Loading","isLoading","isFetching","transitionName","transitionEnterTimeout","transitionLeaveTimeout","style","display","Select","options","map","value","label","onChange","val","instanceRef","ref","mapFrom","defaultState","center","lastCarrierLocation","coordinates","fromLocation","zoom","marginTop","height","width","modules","iconColor","properties","hintContent","from","iconCaption","balloonContentHeader","balloonContentBody","я","geometry","iconLayout","iconImageHref","geolocation","date","Date","toDateR","toHM","to","toLocation","React","Component","connect","geoarticles","bindActionCreators"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,oC,sLCI9BC,EAAiB,SAACC,GAAD,OAAc,SAACC,GAC3C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,MAAM,GAAD,OAAIC,IAAIC,OAAR,+BAA6C,CAChDC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBC,cAAc,UAAD,OAAYX,MAG1BY,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,YAAmB,IAAhBG,EAAe,EAAfA,SACHA,GACFd,EAAS,CAAEe,KAAMC,KAAiBC,QAAS,CAAEH,cAC/CZ,Y,4DCNFgB,E,4MACJC,MAAQ,CACNC,WAAW,G,kEAEQ,IAAD,OACbC,KAAKC,MAAMR,SAASS,UACvBF,KAAKC,MAAME,WAAW1B,eAAeuB,KAAKC,MAAMG,KAAK1B,UAAUY,MAC7D,WACQ,EAAKW,MAAMR,SAASA,SAASY,QACjC,EAAKC,SAAS,CAAEP,UAAW,EAAKE,MAAMR,SAASA,SAAS,GAAGc,W,yCAIlDC,GAEfR,KAAKC,MAAMR,SAASA,SAASY,OAAS,GACP,IAA/BG,EAAEf,SAASA,SAASY,QAEpBL,KAAKM,SAAS,CAAEP,UAAWC,KAAKC,MAAMR,SAASA,SAAS,GAAGc,Q,+BAErD,IAAD,OACHE,EAAUT,KAAKC,MAAMR,SAASA,SAASiB,MACzC,SAACC,GAAD,OAAUA,EAAKJ,MAAQ,EAAKT,MAAMC,aAGpC,OACE,yBAAKa,UAAU,iBACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,cAAd,4EACA,kBAACC,EAAA,EAAD,CAASC,UAAWd,KAAKC,MAAMR,SAASsB,aACxC,kBAAC,qBAAD,CACEC,eAAe,wBACfC,uBAAwB,IACxBC,uBAAwB,EACxBC,MAAO,CACLC,QAAS,cAGTpB,KAAKC,MAAMR,SAASsB,YACpB,oCACE,kBAACM,EAAA,EAAD,CACEC,QAAStB,KAAKC,MAAMR,SAASA,SAAS8B,KAAI,SAACZ,GACzC,MAAO,CACLa,MAAOb,EAAKJ,IACZkB,OACiB,UAAdd,EAAKjB,KAAmB,iCAAU,sEACnC,UACAiB,EAAKZ,cAGX2B,SAAU,SAACC,GACT,EAAKrB,SAAS,CACZP,UAAW4B,EAAIH,SAGnBA,MACEf,GAAW,CACTe,MAAOf,EAAQF,IACfkB,OACoB,UAAjBhB,EAAQf,KAAmB,iCAAU,sEACtC,UACAe,EAAQV,cAIdU,KAAaT,KAAKC,MAAMR,SAASA,SAASY,QAC1C,yBAAKO,UAAU,oBAAf,gLAIAH,IAAYT,KAAKC,MAAMR,SAASA,SAASY,QACzC,yBAAKO,UAAU,oBAAf,6LAIDH,GACC,kBAAC,IAAD,CACEmB,YAAa,SAACC,GACZ,EAAKC,QAAUD,GAEjBE,aAAc,CACZC,OACEvB,EAAQwB,qBACRxB,EAAQwB,oBAAoBC,YAAY7B,OACpCI,EAAQwB,oBAAoBC,YAC5BzB,EAAQ0B,aAAaD,YAC3BE,KAAM,IAERjB,MAAO,CACLkB,UAAW,OACXC,OAAQ,QACRC,MAAO,QAETC,QAAS,CACP,0BACA,yBAGF,kBAAC,IAAD,CACElB,QAAS,CACPmB,UAAW,WAEbC,WAAY,CACVC,YAAalC,EAAQmC,KAAKpB,MAC1BqB,YAAa,wFACbC,qBAAsB,wFACtBC,mBAAoBtC,EAAQmC,KAAKpB,OACjCwB,UAAC,EACHC,SAAUxC,EAAQ0B,aAAaD,cAEhCzB,EAAQwB,qBACPxB,EAAQwB,oBAAoBC,YAAY7B,QACtC,kBAAC,IAAD,CACEiB,QAAS,CACP4B,WAAY,gBACZC,cAAeC,KAEjBC,MAAI,EACJX,WAAY,CACVG,YAAa,8IACbF,YACE,IAAIW,KACF7C,EAAQwB,oBAAoBoB,MAC5BE,UACF,IACA,IAAID,KAAK7C,EAAQwB,oBAAoBoB,MAAMG,QAE/CP,SAAUxC,EAAQwB,oBAAoBC,cAG5C,kBAAC,IAAD,CACEZ,QAAS,CACPmB,UAAW,WAEbC,WAAY,CACVG,YAAa,kFACbF,YAAalC,EAAQgD,GAAGjC,MACxBsB,qBAAsB,kFACtBC,mBAAoBtC,EAAQgD,GAAGjC,OAEjCyB,SAAUxC,EAAQiD,WAAWxB,uB,GA5I3ByB,IAAMC,WAmKfC,uBAXS,SAAC/D,GACvB,MAAO,CACLM,KAAMN,EAAMM,KACZX,SAAUK,EAAMgE,gBAGpB,SAA4BnF,GAC1B,MAAO,CACLwB,WAAY4D,YAAmB5D,EAAYxB,MAGhCkF,CAA6ChE","file":"static/js/10.9b2d1f0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carGeo.e6f14e2e.svg\";","import { GEOARTICLES_GET } from \"../constants\";\r\nimport store from \"../store\";\r\nimport api from \"../../config/api\";\r\n\r\nexport const geoArticlesGet = (apiToken) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`${api.urlApi}/api/article/getGeoArticles`, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiToken}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then(({ articles }) => {\r\n        if (articles)\r\n          dispatch({ type: GEOARTICLES_GET, payload: { articles } });\r\n        resolve();\r\n      });\r\n  });\r\n};\r\n","// App\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as GeoActions from \"../../redux/actions/geoarticle\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport Loading from \"../../Elements/Loading\";\r\nimport { CSSTransitionGroup } from \"react-transition-group\";\r\nimport Select from \"../../Elements/Select\";\r\nimport { Map, Placemark } from \"react-yandex-maps\";\r\nimport geolocation from \"../../img/carGeo.svg\";\r\n// Router\r\n\r\nclass GeoDetect extends React.Component {\r\n  state = {\r\n    articleId: false,\r\n  };\r\n  componentDidMount() {\r\n    if (!this.props.articles.isGetted)\r\n      this.props.GeoActions.geoArticlesGet(this.props.user.apiToken).then(\r\n        () => {\r\n          if (!!this.props.articles.articles.length)\r\n            this.setState({ articleId: this.props.articles.articles[0]._id });\r\n        }\r\n      );\r\n  }\r\n  componentDidUpdate(b) {\r\n    if (\r\n      this.props.articles.articles.length > 0 &&\r\n      b.articles.articles.length === 0\r\n    )\r\n      this.setState({ articleId: this.props.articles.articles[0]._id });\r\n  }\r\n  render() {\r\n    let article = this.props.articles.articles.find(\r\n      (item) => item._id === this.state.articleId\r\n    );\r\n\r\n    return (\r\n      <div className=\"standart-page\">\r\n        <div className=\"container-fluid\">\r\n          <h2 className=\"title mb-0\">Отслеживание</h2>\r\n          <Loading isLoading={this.props.articles.isFetching}></Loading>\r\n          <CSSTransitionGroup\r\n            transitionName=\"height-animation-item\"\r\n            transitionEnterTimeout={500}\r\n            transitionLeaveTimeout={1}\r\n            style={{\r\n              display: \"contents\",\r\n            }}\r\n          >\r\n            {!this.props.articles.isFetching && (\r\n              <>\r\n                <Select\r\n                  options={this.props.articles.articles.map((item) => {\r\n                    return {\r\n                      value: item._id,\r\n                      label:\r\n                        (item.type === \"order\" ? \"Заказ\" : \"Предложение\") +\r\n                        \" №\" +\r\n                        item.articleId,\r\n                    };\r\n                  })}\r\n                  onChange={(val) => {\r\n                    this.setState({\r\n                      articleId: val.value,\r\n                    });\r\n                  }}\r\n                  value={\r\n                    article && {\r\n                      value: article._id,\r\n                      label:\r\n                        (article.type === \"order\" ? \"Заказ\" : \"Предложение\") +\r\n                        \" №\" +\r\n                        article.articleId,\r\n                    }\r\n                  }\r\n                />\r\n                {!article && !!this.props.articles.articles.length && (\r\n                  <div className=\"text-center mt-4\">\r\n                    Отслеживание больше не доступно\r\n                  </div>\r\n                )}\r\n                {!article && !this.props.articles.articles.length && (\r\n                  <div className=\"text-center mt-4\">\r\n                    Заказов/предложений в пути пока нет\r\n                  </div>\r\n                )}\r\n                {article && (\r\n                  <Map\r\n                    instanceRef={(ref) => {\r\n                      this.mapFrom = ref;\r\n                    }}\r\n                    defaultState={{\r\n                      center:\r\n                        article.lastCarrierLocation &&\r\n                        article.lastCarrierLocation.coordinates.length\r\n                          ? article.lastCarrierLocation.coordinates\r\n                          : article.fromLocation.coordinates,\r\n                      zoom: 15,\r\n                    }}\r\n                    style={{\r\n                      marginTop: \"21px\",\r\n                      height: \"500px\",\r\n                      width: \"100%\",\r\n                    }}\r\n                    modules={[\r\n                      \"geoObject.addon.balloon\",\r\n                      \"geoObject.addon.hint\",\r\n                    ]}\r\n                  >\r\n                    <Placemark\r\n                      options={{\r\n                        iconColor: \"#F5D210\",\r\n                      }}\r\n                      properties={{\r\n                        hintContent: article.from.value,\r\n                        iconCaption: \"Начальная точка\",\r\n                        balloonContentHeader: \"Начальная точка\",\r\n                        balloonContentBody: article.from.value,\r\n                      }}я\r\n                      geometry={article.fromLocation.coordinates}\r\n                    />\r\n                    {article.lastCarrierLocation &&\r\n                      article.lastCarrierLocation.coordinates.length && (\r\n                        <Placemark\r\n                          options={{\r\n                            iconLayout: \"default#image\",\r\n                            iconImageHref: geolocation,\r\n                          }}\r\n                          date\r\n                          properties={{\r\n                            iconCaption: \"Расположение перевозчика\",\r\n                            hintContent:\r\n                              new Date(\r\n                                article.lastCarrierLocation.date\r\n                              ).toDateR() +\r\n                              \" \" +\r\n                              new Date(article.lastCarrierLocation.date).toHM(),\r\n                          }}\r\n                          geometry={article.lastCarrierLocation.coordinates}\r\n                        />\r\n                      )}\r\n                    <Placemark\r\n                      options={{\r\n                        iconColor: \"#D36161\",\r\n                      }}\r\n                      properties={{\r\n                        iconCaption: \"Конечная точка\",\r\n                        hintContent: article.to.value,\r\n                        balloonContentHeader: \"Конечная точка\",\r\n                        balloonContentBody: article.to.value,\r\n                      }}\r\n                      geometry={article.toLocation.coordinates}\r\n                    />\r\n                  </Map>\r\n                )}\r\n              </>\r\n            )}\r\n          </CSSTransitionGroup>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n    articles: state.geoarticles,\r\n  };\r\n};\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    GeoActions: bindActionCreators(GeoActions, dispatch),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GeoDetect);\r\n"],"sourceRoot":""}