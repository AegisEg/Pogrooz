{"version":3,"sources":["redux/actions/notification.js","Pages/User/Notifications/Notifications.js"],"names":["notificationsGet","type","apiToken","dispatch","Promise","resolve","reject","fetch","api","urlApi","method","headers","Accept","Authorization","body","JSON","stringify","then","response","json","notifications","dipathType","payload","notificationRead","id","NOTIFICATIONS_ALL_READ","socketId","SocketController","getSocketId","notifyLoad","offset","store","getState","length","action","NOTIFICATIONS_ALL_GET","NOTIFICATIONS_OFFERS_GET","NOTIFICATIONS_ORDERS_GET","NOTIFICATIONS_SYSTEM_GET","NOTIFICATIONS_TARRIFS_GET","NOTIFICATIONS_OFFERS_READ","NOTIFICATIONS_ORDERS_READ","NOTIFICATIONS_SYSTEM_READ","NOTIFICATIONS_TARRIFS_READ","NOTIFICATIONS_ALL_LOAD","NOTIFICATIONS_OFFERS_LOAD","NOTIFICATIONS_ORDERS_LOAD","NOTIFICATIONS_SYSTEM_LOAD","NOTIFICATIONS_TARRIFS_LOAD","NOTIFICATIONS_ALL_LOADING","NOTIFICATIONS_OFFERS_LOADING","NOTIFICATIONS_ORDERS_LOADING","NOTIFICATIONS_SYSTEM_LOADING","NOTIFICATIONS_TARRIFS_LOADING","Notifications","state","typeNotification","renderNotification","props","map","item","index","Notification","reading","notificationActions","user","key","notification","className","this","all","isGetted","onScroll","canLoad","isFetching","notifyBlock","getScrollHeight","getScrollTop","getClientHeight","LoadingFixed","isLoading","transitionName","transitionEnterTimeout","transitionLeaveTimeout","style","display","onClick","setState","order","offer","system","tariff","ref","renderTrackVertical","renderThumbVertical","autoHide","React","Component","connect","bindActionCreators"],"mappings":"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","file":"static/js/16.b310b7d5.chunk.js","sourcesContent":["import {\r\n  NOTIFICATIONS_ALL_GET,\r\n  NOTIFICATIONS_ALL_READ,\r\n  NOTIFICATIONS_OFFERS_GET,\r\n  NOTIFICATIONS_OFFERS_READ,\r\n  NOTIFICATIONS_ORDERS_GET,\r\n  NOTIFICATIONS_ORDERS_READ,\r\n  NOTIFICATIONS_SYSTEM_GET,\r\n  NOTIFICATIONS_SYSTEM_READ,\r\n  NOTIFICATIONS_TARRIFS_GET,\r\n  NOTIFICATIONS_TARRIFS_READ,\r\n  NOTIFICATIONS_ALL_LOAD,\r\n  NOTIFICATIONS_OFFERS_LOAD,\r\n  NOTIFICATIONS_ORDERS_LOAD,\r\n  NOTIFICATIONS_SYSTEM_LOAD,\r\n  NOTIFICATIONS_TARRIFS_LOAD,\r\n  NOTIFICATIONS_ALL_LOADING,\r\n  NOTIFICATIONS_OFFERS_LOADING,\r\n  NOTIFICATIONS_ORDERS_LOADING,\r\n  NOTIFICATIONS_SYSTEM_LOADING,\r\n  NOTIFICATIONS_TARRIFS_LOADING,\r\n} from \"../constants\";\r\n\r\nimport api from \"../../config/api\";\r\nimport store from \"../store\";\r\nimport SocketController from \"../../controllers/SocketController\";\r\n\r\nexport const notificationsGet = (type, apiToken) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`${api.urlApi}/api/notification/get-all`, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiToken}`,\r\n      },\r\n      body: JSON.stringify({\r\n        type: type,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then(({ notifications }) => {\r\n        let dispType = dispatch({\r\n          type: dipathType(type, \"get\"),\r\n          payload: notifications,\r\n        });\r\n        resolve();\r\n      });\r\n  });\r\n};\r\n\r\nexport const notificationRead = (id, type, apiToken) => (dispatch) => {\r\n  dispatch({\r\n    type: dipathType(type, \"read\"),\r\n    payload: id,\r\n  });\r\n  dispatch({\r\n    type: NOTIFICATIONS_ALL_READ,\r\n    payload: id,\r\n  });\r\n\r\n  fetch(`${api.urlApi}/api/notification/read`, {\r\n    method: \"post\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${apiToken}`,\r\n    },\r\n    body: JSON.stringify({\r\n      id,\r\n      socketId: SocketController.getSocketId(),\r\n    }),\r\n  });\r\n};\r\nexport const notifyLoad = (type, apiToken) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    let offset = store.getState().notifications[type].notifications.length;\r\n    dispatch({ type: dipathType(type, \"loading\"), payload: {} });\r\n\r\n    fetch(`${api.urlApi}/api/notification/get-all`, {\r\n      method: \"post\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiToken}`,\r\n      },\r\n      body: JSON.stringify({\r\n        type: type,\r\n        offset,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then(({ notifications }) => {\r\n        dispatch({\r\n          type: dipathType(type, \"load\"),\r\n          payload: { notifications },\r\n        });\r\n        resolve();\r\n      });\r\n  });\r\n};\r\nfunction dipathType(type, action) {\r\n  if (action === \"get\")\r\n    switch (type) {\r\n      case \"all\":\r\n        return NOTIFICATIONS_ALL_GET;\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_GET;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_GET;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_GET;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_GET;\r\n    }\r\n  if (action === \"read\")\r\n    switch (type) {\r\n      case \"all\":\r\n        return NOTIFICATIONS_ALL_READ;\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_READ;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_READ;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_READ;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_READ;\r\n    }\r\n  if (action === \"load\")\r\n    switch (type) {\r\n      case \"all\":\r\n        return NOTIFICATIONS_ALL_LOAD;\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_LOAD;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_LOAD;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_LOAD;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_LOAD;\r\n    }\r\n  if (action === \"loading\")\r\n    switch (type) {\r\n      case \"all\":\r\n        return NOTIFICATIONS_ALL_LOADING;\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_LOADING;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_LOADING;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_LOADING;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_LOADING;\r\n    }\r\n}\r\n","// App\r\nimport React from \"react\";\r\n\r\nimport Notification from \"../../../Elements/Notification\";\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\nimport { CSSTransitionGroup } from \"react-transition-group\";\r\nimport * as notificationActions from \"../../../redux/actions/notification\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport Loading from \"../../../Elements/Loading\";\r\nimport LoadingFixed from \"../../../Elements/LoadingFixed\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\n\r\nclass Notifications extends React.Component {\r\n  state = {\r\n    typeNotification: \"all\",\r\n  };\r\n  componentDidMount() {\r\n    if (!this.props.notifications.all.isGetted)\r\n      this.props.notificationActions\r\n        .notificationsGet(\"all\", this.props.user.apiToken)\r\n        .then(() => {\r\n          this.onScroll();\r\n        });\r\n  }\r\n  onScroll() {\r\n    if (\r\n      this.props.notifications[this.state.typeNotification].canLoad &&\r\n      !this.props.notifications[this.state.typeNotification].isFetching &&\r\n      this.notifyBlock.getScrollHeight() - this.notifyBlock.getScrollTop() <=\r\n        200 + this.notifyBlock.getClientHeight()\r\n    ) {\r\n      this.props.notificationActions.notifyLoad(\r\n        this.state.typeNotification,\r\n        this.props.user.apiToken\r\n      );\r\n    }\r\n  }\r\n  renderNotification = () => {\r\n    let notifications = this.props.notifications[this.state.typeNotification]\r\n      .notifications;\r\n    return (\r\n      <>\r\n        {notifications.map((item, index) => {\r\n          return (\r\n            <Notification\r\n              reading={(id, type) => {\r\n                this.props.notificationActions.notificationRead(\r\n                  id,\r\n                  type,\r\n                  this.props.user.apiToken\r\n                );\r\n              }}\r\n              key={index}\r\n              notification={item}\r\n            />\r\n          );\r\n        })}\r\n        {!notifications.length && (\r\n          <div className=\"text-center\">Уведомлений пока нет</div>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n  render() {\r\n    let notifications = this.props.notifications[this.state.typeNotification];\r\n    return (\r\n      <>\r\n        <div className=\"container-fluid\">\r\n          <h2 className=\"title\">Уведомления</h2>\r\n          <LoadingFixed isLoading={notifications.isFetching}></LoadingFixed>\r\n        </div>\r\n        <CSSTransitionGroup\r\n          transitionName=\"height-animation-item\"\r\n          transitionEnterTimeout={500}\r\n          transitionLeaveTimeout={1}\r\n          style={{\r\n            display: \"contents\",\r\n          }}\r\n        >\r\n          {(!notifications.isFetching || notifications.isGetted) && (\r\n            <>\r\n              <div className=\"container-fluid\">\r\n                <div className=\"tab_groups\">\r\n                  <span\r\n                    className={`tab_group ${\r\n                      this.state.typeNotification === \"all\" ? \"active\" : \"\"\r\n                    }`}\r\n                    onClick={() => {\r\n                      this.setState({ typeNotification: \"all\" });\r\n                      if (!this.props.notifications.all.isGetted)\r\n                        this.props.notificationActions\r\n                          .notificationsGet(\"all\", this.props.user.apiToken)\r\n                          .then(() => {\r\n                            this.onScroll();\r\n                          });\r\n                    }}\r\n                  >\r\n                    Все\r\n                  </span>\r\n                  <span\r\n                    className={`tab_group ${\r\n                      this.state.typeNotification === \"order\" ? \"active\" : \"\"\r\n                    }`}\r\n                    onClick={() => {\r\n                      this.setState({ typeNotification: \"order\" });\r\n                      if (!this.props.notifications.order.isGetted)\r\n                        this.props.notificationActions\r\n                          .notificationsGet(\"order\", this.props.user.apiToken)\r\n                          .then(() => {\r\n                            this.onScroll();\r\n                          });\r\n                    }}\r\n                  >\r\n                    По заказам\r\n                  </span>\r\n                  <span\r\n                    className={`tab_group ${\r\n                      this.state.typeNotification === \"offer\" ? \"active\" : \"\"\r\n                    }`}\r\n                    onClick={() => {\r\n                      this.setState({ typeNotification: \"offer\" });\r\n                      if (!this.props.notifications.offer.isGetted)\r\n                        this.props.notificationActions\r\n                          .notificationsGet(\"offer\", this.props.user.apiToken)\r\n                          .then(() => {\r\n                            this.onScroll();\r\n                          });\r\n                    }}\r\n                  >\r\n                    По предложениям\r\n                  </span>\r\n                  <span\r\n                    className={`tab_group ${\r\n                      this.state.typeNotification === \"system\" ? \"active\" : \"\"\r\n                    }`}\r\n                    onClick={() => {\r\n                      this.setState({ typeNotification: \"system\" });\r\n                      if (!this.props.notifications.system.isGetted)\r\n                        this.props.notificationActions\r\n                          .notificationsGet(\"system\", this.props.user.apiToken)\r\n                          .then(() => {\r\n                            this.onScroll();\r\n                          });\r\n                    }}\r\n                  >\r\n                    Системные\r\n                  </span>\r\n                  <span\r\n                    className={`tab_group ${\r\n                      this.state.typeNotification === \"tariff\" ? \"active\" : \"\"\r\n                    }`}\r\n                    onClick={() => {\r\n                      this.setState({ typeNotification: \"tariff\" });\r\n                      if (!this.props.notifications.tariff.isGetted)\r\n                        this.props.notificationActions\r\n                          .notificationsGet(\"tariff\", this.props.user.apiToken)\r\n                          .then(() => {\r\n                            this.onScroll();\r\n                          });\r\n                    }}\r\n                  >\r\n                    По Тарифу\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <Scrollbars\r\n                onScroll={() => {\r\n                  this.onScroll();\r\n                }}\r\n                ref={(ref) => {\r\n                  this.notifyBlock = ref;\r\n                }}\r\n                renderTrackVertical={(props) => (\r\n                  <div className=\"track-vertical\" />\r\n                )}\r\n                renderThumbVertical={(props) => (\r\n                  <div className=\"thumb-vertical\" />\r\n                )}\r\n                className=\"load-content scroll\"\r\n                autoHide\r\n              >\r\n                {this.renderNotification()}\r\n              </Scrollbars>\r\n            </>\r\n          )}\r\n        </CSSTransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user,\r\n    notifications: state.notifications,\r\n  };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    notificationActions: bindActionCreators(notificationActions, dispatch),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notifications);\r\n"],"sourceRoot":""}